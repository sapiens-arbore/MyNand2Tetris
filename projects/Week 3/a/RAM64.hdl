// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl
/**
 * Memory of sixty four 16-bit registers.
 * If load is asserted, the value of the register selected by
 * address is set to in; Otherwise, the value does not change.
 * The value of the selected register is emitted by out.
 */
CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    //Writing to register
    DMux(in=load, sel=address[5], a=b2it0, b=b2it1);
    DMux(in=b2it0, sel=address[4], a=b2it01it0, b=b2it01it1);
    DMux(in=b2it1, sel=address[4], a=b2it11it0, b=b2it11it1);
    DMux(in=b2it01it0, sel=address[3], a=Reg0, b=Reg1);
    DMux(in=b2it01it1, sel=address[3], a=Reg2, b=Reg3);
    DMux(in=b2it11it0, sel=address[3], a=Reg4, b=Reg5);
    DMux(in=b2it11it1, sel=address[3], a=Reg6, b=Reg7);
    RAM8(in=in[0..15], load=Reg0, address=address[0..2], out[0..15]=Reg0out);
    RAM8(in=in[0..15], load=Reg1, address=address[0..2], out[0..15]=Reg1out);
    RAM8(in=in[0..15], load=Reg2, address=address[0..2], out[0..15]=Reg2out);
    RAM8(in=in[0..15], load=Reg3, address=address[0..2], out[0..15]=Reg3out);
    RAM8(in=in[0..15], load=Reg4, address=address[0..2], out[0..15]=Reg4out);
    RAM8(in=in[0..15], load=Reg5, address=address[0..2], out[0..15]=Reg5out);
    RAM8(in=in[0..15], load=Reg6, address=address[0..2], out[0..15]=Reg6out);
    RAM8(in=in[0..15], load=Reg7, address=address[0..2], out[0..15]=Reg7out);
    //Reading from register
    Mux16(a[0..15]=Reg0out, b[0..15]=Reg1out, sel=address[3],  out[0..15]=xb2it0b1it0);
    Mux16(a[0..15]=Reg2out, b[0..15]=Reg3out, sel=address[3],  out[0..15]=xb2it0b1it1);
    Mux16(a[0..15]=Reg4out, b[0..15]=Reg5out, sel=address[3],  out[0..15]=xb2it1b1it0);
    Mux16(a[0..15]=Reg6out, b[0..15]=Reg7out, sel=address[3],  out[0..15]=xb2it1b1it1);
    Mux16(a[0..15]=xb2it0b1it0, b[0..15]=xb2it0b1it1, sel=address[4],  out[0..15]=xb2it0);
    Mux16(a[0..15]=xb2it1b1it0, b[0..15]=xb2it1b1it1, sel=address[4],  out[0..15]=xb2it1);
    Mux16(a[0..15]=xb2it0, b[0..15]=xb2it1, sel=address[5],  out[0..15]=out);
}
